package at.htlkaindorf.clashtoolsbackend.mapper;

import at.htlkaindorf.clashtoolsbackend.dto.account.AccountRequestDTO;
import at.htlkaindorf.clashtoolsbackend.dto.account.AccountResponseDTO;
import at.htlkaindorf.clashtoolsbackend.pojos.Account;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.List;

/**
 * Mapper interface for converting between Account entities and DTOs.
 * This mapper handles the conversion of Account entities to response DTOs
 * and request DTOs to entities, including the mapping of related entities.
 * Extends the generic EntityMapper interface with specific entity and DTO types.
 */
@Mapper(componentModel = "spring")
public interface AccountMapper extends EntityMapper<Account, AccountResponseDTO, AccountRequestDTO> {

    /**
     * Converts an Account entity to an AccountResponseDTO.
     * Maps user ID and username from the nested User entity to flat fields in the DTO.
     * The baseEntityIds field is ignored and handled separately by the service layer.
     *
     * @param account The Account entity to convert
     * @return The converted AccountResponseDTO
     */
    @Mapping(source = "user.id", target = "userId")
    @Mapping(source = "user.username", target = "username")
    @Mapping(target = "baseEntityIds", ignore = true)
    AccountResponseDTO toDTO(Account account);

    /**
     * Converts an AccountRequestDTO to an Account entity.
     * The ID field is ignored as it's typically generated by the database.
     * The user field is ignored and handled separately by the service layer.
     *
     * @param requestDTO The AccountRequestDTO to convert
     * @return The converted Account entity
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "user", ignore = true)
    Account toEntity(AccountRequestDTO requestDTO);

    /**
     * Converts a list of Account entities to a list of AccountResponseDTOs.
     *
     * @param accounts The list of Account entities to convert
     * @return The list of converted AccountResponseDTOs
     */
    List<AccountResponseDTO> toDTOList(List<Account> accounts);
}
